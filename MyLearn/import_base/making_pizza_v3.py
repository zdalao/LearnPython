"""
如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短
而独一无二的别名——函数的另一个名称，类似于外号。要给函数指定这种特殊外号，需要在导
入它时这样做。
"""

from pizza import make_pizza as mp

mp(16, 'pepperoni')
mp(12, 'mushrooms', 'green peppers', 'extra cheese')

"""
使用 as 给模块指定别名
"""

import pizza as p

p.make_pizza(16, 'pepperoni')
p.make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')

# 导出所有的function
"""
import 语句中的星号让Python将模块 pizza 中的每个函数都复制到这个程序文件中。由于导入
了每个函数，可通过名称来调用每个函数，而无需使用句点表示法。然而，使用并非自己编写的
大型模块时，最好不要采用这种导入方法：如果模块中有函数的名称与你的项目中使用的名称相
同，可能导致意想不到的结果：Python可能遇到多个名称相同的函数或变量，进而覆盖函数，而
不是分别导入所有的函数。
最佳的做法是，要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法。这能
让代码更清晰，更容易阅读和理解。这里之所以介绍这种导入方法，只是想让你在阅读别人编写
的代码时，如果遇到类似于下面的 import 语句，能够理解它们：
"""
# from pizza import *


'''
函数编写指南
编写函数时，需要牢记几个细节。应给函数指定描述性名称，且只在其中使用小写字母和下
划线。描述性名称可帮助你和别人明白代码想要做什么。给模块命名时也应遵循上述约定。
每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字
符串格式。文档良好的函数让其他程序员只需阅读文档字符串中的描述就能够使用它：他们完全
可以相信代码如描述的那样运行；只要知道函数的名称、需要的实参以及返回值的类型，就能在
自己的程序中使用它。
'''